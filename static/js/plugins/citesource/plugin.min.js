tinymce.PluginManager.add('citesource', function(editor, url) {
   var self = this, button, menuInstance, menuDOMString;
   var clickedOnce = false;

   function getValues() {
      var injectionDiv = "<div class='linkpage-container'><input type='hidden' name='SearchBox' value=''></div>"
      tinyMCE.activeEditor.settings.myKeyValueList = [{text: injectionDiv, value: "VALUEPLACEHOLDER"}];
      return editor.settings.myKeyValueList;

      }

   // Add a button that opens a window
   editor.addButton('citesource', {
      type: 'listbox',
      title: django.gettext('Cite'),
      text: django.gettext('Cite'),
      icon: 'icon-book',
      values: getValues(),
      onselect: function() {
         if (this.value() != "VALUEPLACEHOLDER"){
            editor.insertContent(this.value());
            this.value(null);
         }

      },
      onPostRender: function() {
         button = this;

         button.on('click tap', function(e) {
         if (clickedOnce == false){
               menuInstance = this.menu;
               menuDOMString = "#" + menuInstance._id;
               $(menuDOMString).addClass("tinymce-linkpage-menu tinymce-citesource-menu");
               $(menuDOMString).attr("data-mce-editor-id", editor.id);
               var theHTML = "<div class='linkpage-container' data-domstring='" + menuDOMString + "'><input type='hidden' name='SearchBox' value=''><div id='linkpage_results' class='citepage-results' data-editor-id='" + editor.id + "' ><img class='tinymce-loading-spinner' src='https://epcdn-vz.azureedge.net/static/images/loading.gif'></div></div>";
               var specificSelector = ".tinymce-linkpage-menu.tinymce-citesource-menu[data-mce-editor-id='" + editor.id + "']"
               $(specificSelector).html(theHTML);
               clickedOnce = true;

         }
         if (e.target.getAttribute('role') == 'presentation' || e.target.classList.contains("ajax_blurb") || e.target.classList.contains("ajax_links") || e.target.classList.contains("ajax_avatar") || e.target.classList.contains("mce-txt") || e.target.classList.contains("ajax_username") || e.target.classList.contains("mce-i-icon-book") || e.target.classList.contains("cite-line-item") || e.target.classList.contains("mce-caret") ){
         	ajax_execute_search_TinyMCE_cite(editor.id);
         }
         else if (e.target.classList.contains("open-addlink-menu") ){
         	$(menuDOMString).hide();
         	$("#addlink-box-wrapper").show();
         	$(".mce-toolbar-grp.mce-container.mce-panel.mce-stack-layout-item.mce-first").hide();
        	$("#addlink-box .mce-toolbar-grp.mce-container.mce-panel.mce-stack-layout-item.mce-first").show();
         }
         else{
         	e.preventDefault();
            e.stopPropagation();
            e.target.focus();
            e.target.click();
         }
   		});

      },
   });

   self.refresh = function() {
      //remove existing menu if it is already rendered
      if(button.menu){
         button.menu.remove();
         button.menu = null;
      }

      button.settings.values = button.settings.menu = getValues();
      console.log("LOGGED");
      clickedOnce = false;
   };


});

